import streamlit as st
import os
import tempfile
from datetime import datetime
import requests
from transformers import WhisperProcessor, WhisperForConditionalGeneration
import torch
import librosa


st.set_page_config(page_title="Outil de Transcription de R√©union", page_icon=":microphone:", layout="wide")


def transcribe_audio(audio_file, file_extension, model_size="base"):
    """Transcrit le fichier audio t√©l√©charg√© en texte en utilisant le mod√®le Whisper de Hugging Face"""

    # Cr√©ation d'un fichier temporaire avec la bonne extension
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_audio:
        temp_audio.write(audio_file.getvalue())
        temp_audio_path = temp_audio.name

    try:
        # Correspondance entre la taille du mod√®le et l'ID du mod√®le Hugging Face
        model_id_mapping = {
            "tiny": "openai/whisper-tiny",
            "base": "openai/whisper-base",
            "small": "openai/whisper-small",
            "medium": "openai/whisper-medium",
            "large": "openai/whisper-large-v3",
        }
        model_id = model_id_mapping.get(model_size, "openai/whisper-base")
        
        # Chargement de l'audio
        speech_array, sampling_rate = librosa.load(temp_audio_path, sr=16000)
        
        # Chargement du processeur et du mod√®le depuis Hugging Face
        processor = WhisperProcessor.from_pretrained(model_id)
        model = WhisperForConditionalGeneration.from_pretrained(model_id)
        
        # Utilisation du GPU si disponible
        device = "cuda:0" if torch.cuda.is_available() else "cpu"
        model = model.to(device)
        
        # Traitement de l'audio
        input_features = processor(speech_array, sampling_rate=16000, return_tensors="pt").input_features
        input_features = input_features.to(device)
        
        # G√©n√©ration des IDs de tokens
        predicted_ids = model.generate(input_features)
        
        # D√©codage des IDs de tokens en texte
        transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)[0]
        
        return transcription

    except Exception as e:
        st.error(f"Erreur lors de la transcription audio: {e}")
        return "Erreur lors de la transcription audio"

    finally:
        # Nettoyage du fichier temporaire
        os.unlink(temp_audio_path)


def format_meeting_notes_with_llm(transcript, meeting_title, date, attendees, template, api_key, action_items=None):
    """Formate la transcription en notes de r√©union en utilisant l'API Deepseek"""

    if action_items is None:
        action_items = []

    # Pr√©paration des points d'action sous forme de texte s'ils existent
    action_items_text = ""
    if action_items:
        for idx, item in enumerate(action_items, 1):
            action_items_text += f"{idx}. {item}\n"
    else: 
        action_items_text = "Aucun point d'action n'a √©t√© enregistr√© pendant la r√©union."

    # L'invite pour le LLM
    prompt = f"""
    Vous √™tes un professionnel du formatage des notes de r√©union. Formatez la transcription de r√©union suivante selon le mod√®le fourni.
    
    D√©tails de la R√©union:
    - Titre de la R√©union: {meeting_title}
    - Date: {date}
    - Participants: {attendees}
    - Points d'Action:
    {action_items_text}

    Transcription de la R√©union: 
    {transcript}

    Mod√®le de R√©union:
    {template}

   Veuillez formater la transcription de la r√©union selon ce mod√®le, en la rendant professionnelle et bien organis√©e.
   Travaillez en fran√ßais.
"""
    
    try: 
        # Appel de l'API Deepseek
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }

        payload = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.1, 
            "max_tokens": 4000
            
        }

        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions", 
            headers=headers, 
            json=payload
        )

        if response.status_code == 200:
            result = response.json()
            formatted_notes = result["choices"][0]["message"]["content"].strip()
            return formatted_notes
        else: 
            st.error(f"Erreur lors du formatage des notes de r√©union: {response.status_code}")
            return None
    
    except Exception as e:
        st.error(f"Erreur lors du formatage des notes: {e}")
        return format_meeting_notes_fallback(transcript, meeting_title, date, attendees, template, action_items)
    

def format_meeting_notes_fallback(transcript, meeting_title, date, attendees, template, action_items=None):
    """Formateur de secours si l'appel LLM √©choue"""

    # Cr√©ation d'un tableau pour la r√©union
    meeting_notes = f"""
    | DATE | DOSSIERS | R√âSOLUTIONS | RESP. | D√âLAI D'EX√âCUTION | DATE D'EX√âCUTION | STATUT | NBR DE REPORT |
    | ---- | -------- | ----------- | ----- | ----------------- | ---------------- | ------ | ------------- |
    | {date} | {meeting_title} | | | | | En cours | 00 |
    """

    # Ajout des points d'action s'ils existent
    meeting_notes += "\n\n## Points d'Action:\n"
    if action_items:
       for idx, item in enumerate(action_items, 1):
           meeting_notes += f"{idx}. {item}\n"
    else: 
        meeting_notes += "Aucun point d'action n'a √©t√© enregistr√© pendant la r√©union."
    
    # Ajout de la transcription
    meeting_notes += f"\n\n## Transcription:\n{transcript}"

    return meeting_notes


def main():
    st.title("Outil de Transcription Audio de R√©union")
    
    # Initialisation de l'√©tat pour la cl√© API et le mod√®le
    if 'api_key' not in st.session_state:
        st.session_state.api_key = ""
    if 'template' not in st.session_state:
        st.session_state.template = """
| DATE | DOSSIERS | R√âSOLUTIONS | RESP. | D√âLAI D'EX√âCUTION | DATE D'EX√âCUTION | STATUT | NBR DE REPORT |
| ---- | -------- | ----------- | ----- | ----------------- | ---------------- | ------ | ------------- |
| [DATE] | [TITRE DE LA R√âUNION] | [POINTS CL√âS DISCUT√âS] | [RESPONSABLE] | [D√âLAI] | | En cours | 00 |

## Points d'Action:
[LISTE DES POINTS D'ACTION AVEC LES PERSONNES RESPONSABLES]

## Prochaines √âtapes:
[ACTIONS DE SUIVI OU PROCHAINE R√âUNION]
"""
    
    # Barre lat√©rale pour le t√©l√©chargement de fichiers et les options
    with st.sidebar:
        st.header("T√©l√©charger un Fichier Audio")
        uploaded_file = st.file_uploader("Choisir un fichier audio", type=["wav", "mp3", "m4a", "flac"])
        
        # Options du mod√®le
        st.header("Options de Transcription")
        whisper_model = st.selectbox(
            "Taille du Mod√®le Whisper",
            ["tiny", "base", "small", "medium", "large"],
            index=1,
            help="Les mod√®les plus grands sont plus pr√©cis mais plus lents"
        )
        
        # Param√®tres API
        st.header("Param√®tres API Deepseek")
        api_key = st.text_input("Cl√© API Deepseek", 
                                value=st.session_state.api_key, 
                                type="password",
                                help="Entrez votre cl√© API Deepseek")
        # Sauvegarde de la cl√© API dans l'√©tat de session
        st.session_state.api_key = api_key
        
        if uploaded_file is not None:
            file_extension = uploaded_file.name.split('.')[-1].lower()
            st.info(f"Fichier t√©l√©charg√©: {uploaded_file.name}")
            
            # Ajout d'un bouton pour d√©marrer la transcription
            transcribe_button = st.button("Transcrire l'Audio")
    
    # Zone de contenu principal avec deux colonnes
    if uploaded_file is not None:
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("D√©tails de la R√©union")
            meeting_title = st.text_input("Titre de la R√©union")
            meeting_date = st.date_input("Date de la R√©union", datetime.now())
            attendees = st.text_area("Participants (s√©par√©s par des virgules)")
            
            # Personnalisation du mod√®le
            st.subheader("Mod√®le de Notes de R√©union")
            template = st.text_area("Personnaliser le Mod√®le", 
                                   value=st.session_state.template, 
                                   height=250)
            # Sauvegarde du mod√®le dans l'√©tat de session
            st.session_state.template = template
            
            # Conteneur pour les points d'action dynamiques
            st.subheader("Points d'Action")
            action_items_container = st.container()
            
            # Initialisation de l'√©tat de session pour les points d'action si ce n'est pas d√©j√† fait
            if 'action_items' not in st.session_state:
                st.session_state.action_items = [""]
                
            # Affichage de tous les points d'action actuels
            with action_items_container:
                new_action_items = []
                
                for i, item in enumerate(st.session_state.action_items):
                    # Pour chaque point d'action, cr√©ation d'une ligne avec une entr√©e de texte et un bouton de suppression
                    cols = st.columns([0.9, 0.1])
                    with cols[0]:
                        new_item = st.text_input(f"Point {i+1}", item, key=f"item_{i}")
                    with cols[1]:
                        if st.button("ùó´", key=f"del_{i}"):
                            pass  # Nous g√©rerons la suppression en n'ajoutant pas √† la nouvelle liste
                        else:
                            new_action_items.append(new_item)
                
                # Mise √† jour de l'√©tat de session avec la liste filtr√©e (g√®re les suppressions)
                st.session_state.action_items = new_action_items if new_action_items else [""]
                
            # Bouton pour ajouter un nouveau point d'action
            if st.button("Ajouter un Point d'Action"):
                st.session_state.action_items.append("")
                st.rerun()  # Force le rafra√Æchissement pour afficher le nouveau champ
        
        with col2:
            st.header("Transcription & Sortie")
            
            if transcribe_button:
                with st.spinner(f"Transcription audio avec le mod√®le Whisper {whisper_model} en cours..."):
                    transcript = transcribe_audio(uploaded_file, file_extension, whisper_model)
                
                if transcript:
                    st.success("Transcription termin√©e!")
                    
                    # Stockage de la transcription dans l'√©tat de session
                    st.session_state.transcript = transcript
                    
                    # Affichage de la transcription
                    st.subheader("Transcription Brute")
                    st.text_area("Modifier si n√©cessaire:", transcript, height=200, key="edited_transcript")
                    
                    # Bouton de formatage des notes
                    if st.button("Formater les Notes de R√©union"):
                        # Utilisation de la transcription modifi√©e
                        edited_transcript = st.session_state.get("edited_transcript", transcript)
                        
                        # Filtrage des points d'action vides
                        action_items = [item for item in st.session_state.action_items if item.strip()]
                        
                        if st.session_state.api_key:
                            with st.spinner("Formatage avec Deepseek LLM..."):
                                # Formatage avec le LLM
                                formatted_notes = format_meeting_notes_with_llm(
                                    edited_transcript,
                                    meeting_title,
                                    meeting_date.strftime("%d/%m/%Y"),
                                    attendees,
                                    st.session_state.template,
                                    st.session_state.api_key,
                                    action_items
                                )
                        else:
                            st.warning("Aucune cl√© API Deepseek fournie. Utilisation du formateur de secours.")
                            # Formatage avec le formateur de secours
                            formatted_notes = format_meeting_notes_fallback(
                                edited_transcript,
                                meeting_title,
                                meeting_date.strftime("%d/%m/%Y"),
                                attendees,
                                st.session_state.template,
                                action_items
                            )
                        
                        # Stockage des notes format√©es dans l'√©tat de session
                        st.session_state.formatted_notes = formatted_notes
                        
                        # Affichage des notes format√©es
                        st.subheader("Notes de R√©union Format√©es")
                        st.text_area("Aper√ßu:", formatted_notes, height=300)
                        
                        # Cr√©ation d'un bouton de t√©l√©chargement pour les notes format√©es
                        st.download_button(
                            label="T√©l√©charger les Notes de R√©union",
                            data=formatted_notes,
                            file_name=f"{meeting_title}_{meeting_date.strftime('%Y-%m-%d')}_notes.md",
                            mime="text/markdown"
                        )
            
            # Si nous avons d√©j√† transcrit, affichage des r√©sultats
            elif hasattr(st.session_state, 'transcript'):
                # Affichage de la transcription
                st.subheader("Transcription Brute")
                st.text_area("Modifier si n√©cessaire:", st.session_state.transcript, height=200, key="edited_transcript")
                
                # Bouton de formatage des notes
                if st.button("Formater les Notes de R√©union"):
                    # Utilisation de la transcription modifi√©e
                    edited_transcript = st.session_state.get("edited_transcript", st.session_state.transcript)
                    
                    # Filtrage des points d'action vides
                    action_items = [item for item in st.session_state.action_items if item.strip()]
                    
                    if st.session_state.api_key:
                        with st.spinner("Formatage avec Deepseek LLM..."):
                            # Formatage avec le LLM
                            formatted_notes = format_meeting_notes_with_llm(
                                edited_transcript,
                                meeting_title,
                                meeting_date.strftime("%d/%m/%Y"),
                                attendees,
                                st.session_state.template,
                                st.session_state.api_key,
                                action_items
                            )
                    else:
                        st.warning("Aucune cl√© API Deepseek fournie. Utilisation du formateur de secours.")
                        # Formatage avec le formateur de secours
                        formatted_notes = format_meeting_notes_fallback(
                            edited_transcript,
                            meeting_title,
                            meeting_date.strftime("%d/%m/%Y"),
                            attendees,
                            st.session_state.template,
                            action_items
                        )
                    
                    # Stockage des notes format√©es dans l'√©tat de session
                    st.session_state.formatted_notes = formatted_notes
                    
                    # Affichage des notes format√©es
                    st.subheader("Notes de R√©union Format√©es")
                    st.text_area("Aper√ßu:", formatted_notes, height=300)
                    
                    # Cr√©ation d'un bouton de t√©l√©chargement pour les notes format√©es
                    st.download_button(
                        label="T√©l√©charger les Notes de R√©union",
                        data=formatted_notes,
                        file_name=f"{meeting_title}_{meeting_date.strftime('%Y-%m-%d')}_notes.md",
                        mime="text/markdown"
                    )
            
            # Si nous avons d√©j√† des notes format√©es, les afficher
            elif hasattr(st.session_state, 'formatted_notes'):
                st.subheader("Notes de R√©union Format√©es")
                st.text_area("Aper√ßu:", st.session_state.formatted_notes, height=300)
                
                # Cr√©ation d'un bouton de t√©l√©chargement pour les notes format√©es
                st.download_button(
                    label="T√©l√©charger les Notes de R√©union",
                    data=st.session_state.formatted_notes,
                    file_name=f"notes_reunion_{datetime.now().strftime('%Y-%m-%d')}.md",
                    mime="text/markdown"
                )

if __name__ == "__main__":
    main()